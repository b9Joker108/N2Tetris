Последний элемент, который мы должны построить на этой неделе, — это счётчик. Но прежде чем мы приступим к описанию счётчика, я бы хотел сказать несколько слов о контексте, в котором нужны счётчики.

Предположим, что у меня домашний робот, и я хочу, чтобы этот робот испёк для меня несколько пирожных. И вот как я поступлю. Я напишу очень подробную программу, состоящую примерно из 50 инструкций, которые в точности описывают для робота, как именно испечь эти пирожные. И я собираюсь повесить этот рецепт на стену кухни, а рядом с ним повешу счётчик, отображающий число, говорящее роботу, какой пункт инструкции необходимо выполнить следующим. Он начнёт с числа 0, потому что мои инструкции пронумерованы от 0 до 49. Контракт при этом будет следующим: когда робот выполняет набор инструкций, по завершении этого, если угодно, цикла — счётчик увеличивается на единицу. Тогда робот смотрит на счётчик и видит, что он должен выполнить инструкцию номер 1. Он выполняет эту инструкцию номер 1. Счётчик становится равным 2, робот выполняет инструкцию номер 2, и т.д.

Но помимо этого простого приращения на 1, мне также хочется иметь полный контроль над ситуацией, чтобы я мог подойти и выставить на счётчике определенное число — например, 17. Независимо от того, что сейчас на счётчике: три, четыре, пять, или что-то ещё, — я хочу выставить число 17. И затем пусть счётчик продолжает считать, начиная с 17. Это очень важный момент, ведь, предположим, робот закончил выпекать пирожные, и я хочу испечь ещё один набор пирожных. Для этого я могу подойти к счётчику, выставить на нём 0, и это приведёт к тому, что робот начнёт сначала. Ещё одна причина, по которой мы хотим устанавливать другие значения —
=============================== at :2:11 ===============================2:11
в том, что когда робот начинает печь вторую партию пирожных, духовка уже нагрета. Так что мы должны пропустить тот набор инструкций, который объясняет роботу, как включить духовку. Первая инструкция в программе, вероятно, будет выглядеть примерно так: "Если духовка работает, переходите к инструкции 11", — или что-то ещё, указывающее пропустить все инструкции по включению духовки. Это еще одна причина, по которой нам нужна возможность устанавливать на счётчике определённое значение. Как мы отсюда видим, по сути, нам необходимо поддерживать три общих, примитивных операции, а именно, во-первых, получить первую инструкцию, для чего нам нужно устанавливать счётчик команд в ноль.
=============================== at :3:3 ===============================3:03
Вторая операция, своего рода действие по умолчанию — получение следующей инструкции, и для этого нам нужна возможность увеличивать текущее состояние счётчика на единицу. И, наконец, нам нужна возможность перейти к конкретной инструкции, получить и выполнить её, и для этого нужна возможность задавать счётчику некоторое желаемое значение.
=============================== at :3:27 ===============================3:27
Так что же такое счётчик? Счётчик — это микросхема, аппаратное устройство, каким-то образом реализующее данную абстракцию, каким-то образом поддерживающее эти три примитивные операции.
=============================== at :3:40 ===============================3:40
Давайте же поговорим об этой абстракции подробнее. Я буду придерживаться тех же обозначений элементов, которыми мы пользовались в предыдущих лекциях курса. Перед нами описание счётчика команд в виде чёрного ящика. Мы видим, что у него 16-битный вход, содержащий определённое 16-битное значение. Также есть 16-битный выход. А также есть три управляющих бита, которые называются load, inc и reset. Inc означает increment — приращение. Как же должен работать этот чип? Вот более формальное описание требуемого поведения этого 16-битного счётчика. Если бит сброса равен единице, если этот бит выставлен, тогда я хочу, чтобы счётчик выдавал 0. На следующем такте счётчик выдаст число 0. Если установлен бит load, то я хочу установить счётчик в определенное значение. Если я хочу, чтобы счётчик перешёл к значению 17, то подаю число 17 в двоичном виде, подаю на вход in 16-битное значение, выражающее 17, и устанавливаю бит load. Это позволит обойти обычное приращение счётчика и на следующем такте установить счётчику значение 17. Если же inc равен единице, если inc установлен, тогда выходом счётчика будет текущее его значение плюс один. Это операция счётчика по умолчанию. И, наконец, если ни один из этих управляющих битов не выставлен, счётчик ничего не делает, он выдаёт своё текущее состояние. Итак, это требуемое поведение счётчика и ваша задача — написать необходимый HDL-код, реализующий это поведение. Если вы не понимаете, как это сделать, — не беспокойтесь, потому что у нас будет отдельная лекция, посвящённая проекту №3. И этой лекции мы поговорим о различных советах и рекомендациях по созданию каждой микросхемы, включая микросхему счётчика.
=============================== at :6:10 ===============================6:10
Теперь, прежде чем мы продолжим, я хотел бы привести наглядный пример работы счётчика, воспользовавшись нашим симулятором аппаратуры. Этим мы сейчас и займёмся.
=============================== at :6:22 ===============================6:22
Для начала загрузим встроенный элемент счётчика команд. Мы идем в папку tools и в ней ищем builtInChips. Внутри builtInChips
=============================== at :6:41 ===============================6:41
мы ищем файл со счётчиком PC.hdl. Вот он. Это встроенный элемент, и мы видим, что у него есть графический интерфейс, который показывает содержимое счётчика команд, который, по сути, является регистром с несколькими управляющими битами. И мы видим, что у него и правда есть 16-битный вход, 16-битный выход и три управляющих бита с именами load, inc и reset.
=============================== at :7:9 ===============================7:09
Давайте загрузим в счётчик команд какое-нибудь значение.. Итак, мы хотим ввести число 23. Мы должны пустить такт, чтобы внести это значение. Но мы видим, что ничего не происходит. Мы пускаем тактовый сигнал, и ничего не происходит. А не происходит ничего, потому что я забыл установить бит "load". Давайте установим бит load и пустим тактовый сигнал. И мы видим, что счётчик теперь содержит 23, только он теперь ничего не считает, не так ли? Похоже, он замер на 23. А стоит он, потому что мы забыли выставить бит inc. Давайте попробуем это сделать. Мы выставляем бит inc — и по-прежнему ничего не происходит. А не происходит ничего, потому что в каждом цикле мы делаем две вещи: во-первых, говорим счётчику увеличивать значение, а ещё мы на каждом такте загружаем 23, потому-то он и остаётся на 23. Если мы хотим, чтобы счётчик команд всё-таки занимался счётом, мы должны снять бит load,
=============================== at :8:34 ===============================8:34
пустить тактовый сигнал — и, наконец, похоже, что мы разогреваем духовку. Программный счётчик каждый такт увеличивает значение на 1. Это классическая работа счётчика команд. Мы можем щёлкнуть по иконке быстрой перемотки вперёд.
=============================== at :8:56 ===============================8:56
Это запустит своего рода бесконечный цикл, пускающий тактовые сигналы. И мы видим, что на каждом такте счётчик команд увеличивается на единицу.
=============================== at :9:9 ===============================9:09
Отлично. Теперь остановим генератор и сбросим счётчик. Мы устанавливаем бит reset в 1 и надеемся, что счётчик обнулится.
=============================== at :9:23 ===============================9:23
Пустим такт — и действительно, мы видим, что на следующем такте счётчик команд равен нулю. Но он опять ничего не считает, поскольку reset всё ещё 1. Поэтому нам нужно сбросить бит reset и заново пустить такты — и теперь мы видим, что счётчик на каждом такте возрастает.
=============================== at :9:50 ===============================9:50
Итак, это была демонстрация работы счётчика команд. Вернёмся к лекции.
=============================== at :9:56 ===============================9:56
На этом заканчивается лекция с описанием, как построить счётчик. И на этом, к тому же, заканчивается описание тех элементов, что мы собираемся построить на этой неделе. В следующей лекции мы дадим вам разного рода советы и рекомендации по созданию этих микросхем и по сдаче проекта №3.